// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for `src/ffigen_test_plugin.h`.
///
/// Regenerate bindings with `flutter pub run ffigen --config ffigen.yaml`.
///
class FfigenTestPluginBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  FfigenTestPluginBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  FfigenTestPluginBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  ffi.Pointer<ffi.Char> hello_world() {
    return _hello_world();
  }

  late final _hello_worldPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'hello_world');
  late final _hello_world =
      _hello_worldPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  ffi.Pointer<ffi.Char> hello_world_delayed() {
    return _hello_world_delayed();
  }

  late final _hello_world_delayedPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'hello_world_delayed');
  late final _hello_world_delayed =
      _hello_world_delayedPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  int add(
    int a,
    int b,
  ) {
    return _add(
      a,
      b,
    );
  }

  late final _addPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>('add');
  late final _add = _addPtr.asFunction<int Function(int, int)>();

  int subtract(
    int a,
    int b,
  ) {
    return _subtract(
      a,
      b,
    );
  }

  late final _subtractPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>(
          'subtract');
  late final _subtract = _subtractPtr.asFunction<int Function(int, int)>();

  int multiply(
    int a,
    int b,
  ) {
    return _multiply(
      a,
      b,
    );
  }

  late final _multiplyPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>(
          'multiply');
  late final _multiply = _multiplyPtr.asFunction<int Function(int, int)>();

  int divide(
    int a,
    int b,
  ) {
    return _divide(
      a,
      b,
    );
  }

  late final _dividePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>('divide');
  late final _divide = _dividePtr.asFunction<int Function(int, int)>();

  ffi.Pointer<ffi.Int> add2(
    ffi.Pointer<ffi.Int> a,
    ffi.Pointer<ffi.Int> b,
  ) {
    return _add2(
      a,
      b,
    );
  }

  late final _add2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int> Function(
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('add2');
  late final _add2 = _add2Ptr.asFunction<
      ffi.Pointer<ffi.Int> Function(
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> reverse(
    ffi.Pointer<ffi.Char> str,
  ) {
    return _reverse(
      str,
    );
  }

  late final _reversePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('reverse');
  late final _reverse = _reversePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();
}

final class MatrixData extends ffi.Struct {
  @ffi.Size()
  external int rows;

  @ffi.Size()
  external int cols;

  external ffi.Pointer<ffi.Double> data;
}
