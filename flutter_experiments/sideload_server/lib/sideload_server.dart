import 'dart:io';

import 'package:shelf/shelf.dart';
import 'package:shelf/shelf_io.dart' as shelf_io;
import 'package:shelf_router/shelf_router.dart';
import 'package:shelf_static/shelf_static.dart';

void run(int port) async {
  var router = Router();

  router.get('/', (Request request) {
    return Response.ok(
        'compiled libs can be found under <a href="/lib/">/lib/</a>',
        headers: {'Content-Type': 'text/html'});
  });
  router.get('/check', (Request request) {
    return Response.ok('OK', headers: {'Content-Type': 'text/plain'});
  });

  var handler =
      const Pipeline().addMiddleware(logRequests()).addHandler(router.call);

  // Serve the 'www' folder
  var staticHandler = createStaticHandler('www', listDirectories: true);
  router.mount("/lib/", staticHandler);

  // Catch all unhandled requests
  router.all('/<ignored|.*>', (Request request) {
    return Response.notFound('Page not found');
  });

  var server = await shelf_io.serve(handler, '0.0.0.0', port);

  // Enable content compression
  server.autoCompress = true;
}

Future<List<String>> getIPsV4() async {
  var interfaces = await NetworkInterface.list();
  var ips = <String>[];
  for (var interface in interfaces) {
    for (var addr in interface.addresses) {
      if (addr.type.name == 'IPv4') {
        ips.add(addr.address);
      }
    }
  }
  return ips;
}

void writeConnections(List<String> ips, int port, String path) {
  StringBuffer sb = StringBuffer();
  sb.writeln("// This file is generated by sideload_server.\n");
  sb.write("final List<String> connections = [\"");
  final uris = ips.map((ip) => "http://$ip:$port").toList();
  sb.writeAll(uris, "\", \"");
  sb.write("\"];");
  var file = File(path);
  file.writeAsStringSync(sb.toString());
  print('Wrote connections to $path');
}
